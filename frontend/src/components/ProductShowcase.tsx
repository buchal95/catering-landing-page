'use client'

import { motion } from 'framer-motion'
import { useEffect, useRef, useState } from 'react'

declare global {
  interface Window {
    dataLayer: Record<string, unknown>[];
  }
}

export default function ProductShowcase() {
  const sectionRef = useRef<HTMLElement>(null);
  const [activeCategory, setActiveCategory] = useState('savory');

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting && typeof window !== 'undefined' && window.dataLayer) {
            window.dataLayer.push({
              'event': 'section_view',
              'section_name': 'products'
            });
          }
        });
      },
      { threshold: 0.3 }
    );

    if (sectionRef.current) {
      observer.observe(sectionRef.current);
    }

    return () => observer.disconnect();
  }, []);

  const categories = [
    { id: 'savory', name: 'Slan√© obƒçerstven√≠', icon: 'ü•™' },
    { id: 'premium', name: 'Premium selection', icon: 'üçæ' },
    { id: 'hot', name: 'Tepl√° j√≠dla', icon: 'üçó' },
    { id: 'special', name: 'Speci√°ln√≠ diety', icon: 'üå±' }
  ];

  const products = {
    savory: [
      "Bagety mix (uzen√Ω losos, mozzarella a rajƒçata)",
      "Banketn√≠ peƒçivo mix (sal√°m, parmsk√° ≈°unka, ≈°unka/s√Ωr)",
      "Box croissant (3 varianty)",
      "Box tousty",
      "Francouzsk√© bagety kr√°jen√©",
      "Oblo≈æen√© kaiserky mini",
      "Mini pizzy (≈°unkov√© a s√Ωrov√©)",
      "Mix mini slan√Ωch plnƒõn√Ωch croissant≈Ø",
      "Mozzarella a cherry rajƒçe ≈°p√≠zy",
      "Mini burgery (s masem i vegetari√°nsk√©)",
      "Tortilly s ku≈ôec√≠mi stripsy"
    ],
    premium: [
      "Bambusov√° lodiƒçka s v√Ωbƒõrov√Ωmi uzeninami a s√Ωry",
      "Fresh plate s parmskou ≈°unkou",
      "Fresh plate s uzen√Ωm lososem",
      "Fresh plate s roastbeefem",
      "Fresh plate mix 4 s√Ωr≈Ø",
      "Fresh plate mix 4 uzenin",
      "Kanapky s roastbeefem, okurkou a bor≈Øvkou",
      "Kanapky s parmskou ≈°unkou a hroznov√Ωm v√≠nem",
      "Kanapky s uzen√Ωm lososem, koprem a limetkou",
      "Kanapky s hermel√≠nem a hroznov√Ωm v√≠nem",
      "Masov√Ω box",
      "S√Ωrov√Ω box"
    ],
    hot: [
      "Sma≈æen√© ku≈ôec√≠ ≈ô√≠zeƒçky",
      "Box stripsy v cornflakes",
      "Sal√°ty (8 variant)",
      "Zachlazen√° j√≠dla",
      "Peƒçivo ƒçerstv√©"
    ],
    special: [
      "Box bezlepkov√©ho peƒçiva",
      "Box pro vegany (peƒçivo, zelenina, ajvar, humus)",
      "Zeleninov√Ω box",
      "Bezlakt√≥zov√© varianty",
      "Dietn√≠ menu na m√≠ru"
    ]
  };

  const handleCategoryClick = (categoryId: string) => {
    setActiveCategory(categoryId);
    if (typeof window !== 'undefined' && window.dataLayer) {
      window.dataLayer.push({
        'event': 'product_category_view',
        'category': categoryId,
        'category_name': categories.find(c => c.id === categoryId)?.name
      });
    }
  };

  return (
    <section ref={sectionRef} className="py-20 bg-gradient-to-br from-gray-50 to-white">
      <div className="container mx-auto px-4">
        {/* Section Header */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            Co nab√≠z√≠me
          </h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            ≈†irok√© spektrum menu od tradiƒçn√≠ ƒçesk√© kuchynƒõ po modern√≠ gastronomii. 
            V≈°e p≈ôipravujeme z ƒçerstv√Ωch a sez√≥nn√≠ch surovin.
          </p>
        </motion.div>

        {/* Category Tabs */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
          viewport={{ once: true }}
          className="flex flex-wrap justify-center gap-4 mb-12"
        >
          {categories.map((category) => (
            <button
              key={category.id}
              onClick={() => handleCategoryClick(category.id)}
              className={`flex items-center gap-2 px-6 py-3 rounded-full font-semibold transition-all duration-300 ${
                activeCategory === category.id
                  ? 'bg-orange-500 text-white shadow-lg'
                  : 'bg-white text-gray-700 hover:bg-orange-50 border border-gray-200'
              }`}
            >
              <span className="text-lg">{category.icon}</span>
              <span>{category.name}</span>
            </button>
          ))}
        </motion.div>

        {/* Products Grid */}
        <motion.div
          key={activeCategory}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4 }}
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl mx-auto"
        >
          {products[activeCategory as keyof typeof products].map((product, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.3, delay: index * 0.05 }}
              className="bg-white p-6 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 border border-gray-100"
            >
              <div className="flex items-start gap-3">
                <div className="w-3 h-3 bg-orange-500 rounded-full mt-2 flex-shrink-0"></div>
                <p className="text-gray-800 font-medium leading-relaxed">{product}</p>
              </div>
            </motion.div>
          ))}
        </motion.div>

        {/* Additional Services */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.4 }}
          viewport={{ once: true }}
          className="mt-16 text-center"
        >
          <div className="bg-white rounded-2xl p-8 shadow-lg max-w-4xl mx-auto border border-gray-100">
            <h3 className="text-2xl font-bold text-gray-900 mb-6">
              Dopl≈àkov√© slu≈æby
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="text-center">
                <div className="text-3xl mb-3">üçΩÔ∏è</div>
                <h4 className="font-semibold text-gray-900 mb-2">Pron√°jem invent√°≈ôe</h4>
                <p className="text-gray-600 text-sm">Kompletn√≠ vybaven√≠ pro va≈°i akci</p>
              </div>
              <div className="text-center">
                <div className="text-3xl mb-3">üë®‚Äçüç≥</div>
                <h4 className="font-semibold text-gray-900 mb-2">Profesion√°ln√≠ obsluha</h4>
                <p className="text-gray-600 text-sm">Zku≈°en√Ω person√°l pro bezchybn√Ω servis</p>
              </div>
              <div className="text-center">
                <div className="text-3xl mb-3">üöö</div>
                <h4 className="font-semibold text-gray-900 mb-2">Kompletn√≠ logistika</h4>
                <p className="text-gray-600 text-sm">Doruƒçen√≠ a √∫klid po akci</p>
              </div>
            </div>
          </div>
        </motion.div>

        {/* CTA */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.6 }}
          viewport={{ once: true }}
          className="text-center mt-12"
        >
          <button
            onClick={() => {
              if (typeof window !== 'undefined' && window.dataLayer) {
                window.dataLayer.push({
                  'event': 'cta_click',
                  'cta_location': 'products_section',
                  'cta_text': 'Zobrazit kompletn√≠ nab√≠dku'
                });
              }
              document.getElementById('contact')?.scrollIntoView({ behavior: 'smooth' });
            }}
            className="bg-orange-500 hover:bg-orange-600 text-white px-8 py-4 rounded-full text-lg font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
          >
            Zobrazit kompletn√≠ nab√≠dku
          </button>
        </motion.div>
      </div>
    </section>
  );
}
